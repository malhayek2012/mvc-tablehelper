using System;
using System.Linq;
using System.Web.Mvc;
using Sandtrap.Extensions;
using Sandtrap.Web.Properties;

namespace Sandtrap.Web.DataAnnotations
{

    /// <summary>
    /// An attribute used to define additional properties used in rendering tables 
    /// generated by the <see cref="Sandtrap.Web.Html.TableHelper.TableDisplayFor"/> and 
    /// <see cref="Sandtrap.Web.Html.TableHelper.TableEditorFor"/> methods.
    /// </summary>
    /// <exception cref="ArgumentException">
    /// If <see cref="DisplayProperty"/> is applied to a complex type and the type does 
    /// not contain a property named <see cref="DisplayProperty"/>.
    /// </exception>
    [AttributeUsage(AttributeTargets.Property)]
    public class TableColumnAttribute : Attribute, IMetadataAware
    {

        #region .Constructors 

        /// <summary>
        /// Initialises a new instance of the TableColumnAttribute class with default properties.
        /// </summary>
        public TableColumnAttribute()
        {
        }

        #endregion

        #region .Properties 

        /// <summary>
        /// Gets or sets a value indicating if the property should be excluded 
        /// from the table. The default is false.
        /// </summary>
        /// <remarks>
        /// If true, the property is excluded in both readonly and editable tables.
        /// </remarks>
        public bool Exclude { get; set; }

        /// <summary>
        /// Gets or sets a value indicating if the property should readonly in an 
        /// editable table.
        /// </summary>
        /// <remarks>
        /// If true, hidden inputs are created for the property (including properties
        /// of a complex type).
        /// If the property is a complex type, a table cell is created for each property of
        /// the type unless the <see cref="DisplayProperty"/> is specified.
        /// </remarks>
        public bool IsReadonly { get; set; }

        /// <summary>
        /// Gets or sets a value indicating if a total should be rendered in the 
        /// table footer.
        /// </summary>
        /// <remarks>
        /// The value is ignored if the property is not a numeric type.
        /// </remarks>
        public bool IncludeTotal { get; set; }

        /// <summary>
        /// If applied to a property which is a complex type, gets or sets the name of
        /// property to uniquely identify the property in a select control.
        /// </summary>
        /// <remarks>
        /// The property is only applicable to edit tables.
        /// The value is ignored if the property is not a complex type.
        /// </remarks>
        public string IDProperty { get; set; }

        /// <summary>
        /// If applied to a property which is a complex type, gets or sets the name of
        /// property to display in the table cell.
        /// In a readonly table all other child properties are ignored. 
        /// In an editable table, all other child properties are rendered as hidden inputs.
        /// </summary>
        public string DisplayProperty { get; set; }

        /// <summary>
        /// Gets or sets a value indicating if the property value should be displayed 
        /// in a table if the preceding table row contains the same value.
        /// The default is false.
        /// </summary>
        /// <remarks>
        /// The value is ignored if <see cref="IncludeTotal"/> is true.
        /// </remarks>
        public bool NoRepeat { get; set; }

        #endregion

        #region .Methods 

        /// <summary>
        /// Adds additional metadata values used in rendering tables generated by the 
        /// <see cref="Sandtrap.Web.Html.TableHelper.TableDisplayFor"/> and 
        /// <see cref="Sandtrap.Web.Html.TableHelper.TableEditorFor"/> methods.
        /// </summary>
        /// <remarks>
        /// For boolean values, the value is only added if true (then we only need to check 
        /// if the key exists, rather that check for the key and then the get the value.
        /// </remarks>
        public void OnMetadataCreated(ModelMetadata metadata)
        {
            if (Exclude)
            {
                metadata.AdditionalValues[Resources.TableColumnAttribute_Exclude] = true;
                // Other settings are irrelevant
                return;
            }
            if (IsReadonly)
            {
                metadata.AdditionalValues[Resources.TableColumnAttribute_Readonly] = true;
            }
            // Get the display property
            ModelMetadata propertyMetadata = null;
            if (IDProperty != null && metadata.IsComplexType)
            {
                // Check the ID property exists
                propertyMetadata = metadata.Properties.FirstOrDefault(m => m.PropertyName == IDProperty);
                if (propertyMetadata == null)
                {
                    throw new ArgumentException(String.Format(Resources.TableColumnAttribute_InvalidProperty, metadata.ModelType.Name, IDProperty));
                }
                metadata.AdditionalValues[Resources.TableColumnAttribute_IDProperty] = IDProperty;
            }
            if (DisplayProperty != null && metadata.IsComplexType)
            {
                // Check the display property exists
                propertyMetadata = metadata.Properties.FirstOrDefault(m => m.PropertyName == DisplayProperty);
                if (propertyMetadata == null)
                {
                    throw new ArgumentException(String.Format(Resources.TableColumnAttribute_InvalidProperty, metadata.ModelType.Name, DisplayProperty));
                }
                metadata.AdditionalValues[Resources.TableColumnAttribute_DisplayProperty] = DisplayProperty;
            }
            // If rendering totals, check we can
            if (IncludeTotal)
            {
                if (propertyMetadata != null && propertyMetadata.ModelType.IsNumeric())
                {
                    metadata.AdditionalValues[Resources.TableColumnAttribute_IncludeTotal] = true;
                }
                else if (metadata.ModelType.IsNumeric())
                {
                    metadata.AdditionalValues[Resources.TableColumnAttribute_IncludeTotal] = true;
                }
                else
                {
                    // Reset
                    IncludeTotal = false;
                }
            }
            if (NoRepeat && !IncludeTotal)
            {
                metadata.AdditionalValues[Resources.TableColumnAttribute_NoRepeat] = true;
            }
        }

        #endregion

    }
}

